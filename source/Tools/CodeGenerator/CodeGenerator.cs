// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Roslynator.CodeGeneration.CSharp;
using Roslynator.Utilities;

namespace Roslynator.CodeGeneration
{
    internal class CodeGenerator : Generator
    {
        private const string CopyrightBanner = "Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.";

        public CodeGenerator(string rootPath, StringComparer comparer = null)
            : base(rootPath, comparer)
        {
        }

        public void Generate()
        {
            WriteCompilationUnit(
                @"Refactorings\RefactoringIdentifiers.Generated.cs",
                RefactoringIdentifiersGenerator.Generate(Refactorings, Comparer));

            WriteCompilationUnit(
                @"VisualStudio.Core\RefactoringsOptionsPage.Generated.cs",
                RefactoringsOptionsPageGenerator.Generate(Refactorings, Comparer));

            WriteCompilationUnit(
                @"Analyzers\DiagnosticDescriptors.Generated.cs",
                DiagnosticDescriptorsGenerator.Generate(Analyzers, Comparer));

            WriteCompilationUnit(
                @"CodeFixes\CodeFixIdentifiers.Generated.cs",
                CodeFixIdentifiersGenerator.Generate(CodeFixes, Comparer));

            WriteCompilationUnit(
                @"VisualStudio.Core\CodeFixesOptionsPage.Generated.cs",
                CodeFixesOptionsPageGenerator.Generate(CodeFixes, Comparer));

            WriteCompilationUnit(
                @"Core\CSharp\CompilerDiagnosticIdentifiers.cs",
                CompilerDiagnosticIdentifiersGenerator.Generate(CompilerDiagnostics, Comparer));
        }

        private void WriteCompilationUnit(string relativePath, CompilationUnitSyntax compilationUnit)
        {
            FileHelper.WriteCompilationUnit(GetPath(relativePath), compilationUnit, banner: CopyrightBanner, autoGenerated: true);
        }
    }
}
